import LeanAide.SimpleFrontend
import LeanAideCore.Aides
import Mathlib

open LeanAide Lean Meta Elab

open scoped Nat

universe u v w u_1 u_2 u_3 u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace LeanAideTest

/-- info: fun {K} [DivisionSemiring K] {a b} h => Eq.symm (div_add_same h) -/
#guard_msgs in
#eval ppExprM <| elabFrontDefExprM "theorem div_add_one{K : Type u_1} [DivisionSemiring K] {a b : K} (h : b ‚â† 0) :
a / b + 1 = (a + b) / b := (div_add_same h).symm" `div_add_one

/--
info: fun R [CommSemiring R] M [AddCommMonoid M] [_root_.Module R M] => LinearMap.BilinMap R M R
-/
#guard_msgs in
#eval ppExprM <| elabFrontDefExprM "{R‚ÇÅ : Type u_1} ‚Üí
  [inst : CommSemiring R‚ÇÅ] ‚Üí {n : Type u_5} ‚Üí [Fintype n] ‚Üí Matrix n n R‚ÇÅ ‚Üí LinearMap.BilinForm R‚ÇÅ (n ‚Üí R‚ÇÅ)" `LinearMap.BilinForm

/--
info: fun V [CategoryTheory.Category.{v, u} V] [CategoryTheory.Limits.HasZeroMorphisms V] Œ± [AddRightCancelSemigroup Œ±]
    [One Œ±] =>
  HomologicalComplex V (ComplexShape.down Œ±)
-/
#guard_msgs in
#eval ppExprM <| elabFrontDefExprM "(C : Type u) ‚Üí
  [inst : CategoryTheory.Category.{v, u} C] ‚Üí
    [inst_1 : CategoryTheory.Limits.HasCoproducts C] ‚Üí
      [inst_2 : CategoryTheory.Preadditive C] ‚Üí
        (R : C) ‚Üí
          (X : TopCat) ‚Üí
            [TotallyDisconnectedSpace ‚ÜëX] ‚Üí
              ((AlgebraicTopology.singularChainComplexFunctor C).obj R).obj X ‚âÖ
                ChainComplex.alternatingConst.obj (‚àê fun x => R)" `ChainComplex

def elabFrontDefTypeValViewM(s: String)(n: Name)(modifyEnv: Bool := false) : MetaM <| String √ó String := do
  let (type, val) ‚Üê elabFrontDefTypeValExprM s n modifyEnv
  let typefmt ‚Üê  ppExpr type
  let typeval ‚Üê  ppExpr val
  return (typefmt.pretty, typeval.pretty)

/--
info: ("(R : Type u_1) ‚Üí\n  [inst : CommSemiring R] ‚Üí (M : Type u_6) ‚Üí [inst_1 : AddCommMonoid M] ‚Üí [_root_.Module R M] ‚Üí Type (max u_1 u_6)",
  "fun R [CommSemiring R] M [AddCommMonoid M] [_root_.Module R M] => LinearMap.BilinMap R M R")
-/
#guard_msgs in
#eval elabFrontDefTypeValViewM "{R‚ÇÅ : Type u_1} ‚Üí
  [inst : CommSemiring R‚ÇÅ] ‚Üí {n : Type u_5} ‚Üí [Fintype n] ‚Üí Matrix n n R‚ÇÅ ‚Üí LinearMap.BilinForm R‚ÇÅ (n ‚Üí R‚ÇÅ)" `LinearMap.BilinForm

/--
info: ("‚àÄ {K : Type u_1} [inst : DivisionSemiring K] {a b : K}, b ‚â† 0 ‚Üí a / b + 1 = (a + b) / b",
  "fun {K} [DivisionSemiring K] {a b} h => Eq.symm (div_add_same h)")
-/
#guard_msgs in
#eval elabFrontDefTypeValViewM "theorem div_add_one{K : Type u_1} [DivisionSemiring K] {a b : K} (h : b ‚â† 0) :
a / b + 1 = (a + b) / b := (div_add_same h).symm" `div_add_one

/--
info: ("‚àÄ {K : Type u_1} [inst : DivisionSemiring K] {a b : K}, b ‚â† 0 ‚Üí a / b + 1 = (a + b) / b",
  "fun {K} [DivisionSemiring K] {a b} h => Eq.symm (div_add_same h)")
-/
#guard_msgs in
#eval elabFrontDefTypeValViewM "variable {K : Type u_1}
variable [DivisionSemiring K] {a b : K}
theorem div_add_one' (h : b ‚â† 0) :
a / b + 1 = (a + b) / b := (div_add_same h).symm" `div_add_one'



/--
info: Messages
---
info: (R : Type u_1) ‚Üí
  [inst : CommSemiring R] ‚Üí (M : Type u_6) ‚Üí [inst_1 : AddCommMonoid M] ‚Üí [_root_.Module R M] ‚Üí Type (max u_1 u_6)
-/
#guard_msgs in
#eval ppExprM <| elabFrontThmExprM "theorem commutativity (p q : Prop) : p ‚àß q ‚Üí q ‚àß p := by
intro h
cases h with
| intro hp hq =>
  constructor
  ¬∑ exact hq
  ¬∑ exact hp
"  `LinearMap.BilinForm

/--
info: Messages
---
info: ‚àÄ {K : Type u_1} [inst : DivisionSemiring K] {a b : K}, b ‚â† 0 ‚Üí a / b + 1 = (a + b) / b
-/
#guard_msgs in
#eval ppExprM <| elabFrontThmExprM "theorem div_add_1{K : Type u_1} [DivisionSemiring K] {a b : K} (h : b ‚â† 0) :
a / b + 1 = (a + b) / b := (div_add_same h).symm" `div_add_1


elab "#defs" s:str t:ident* : command => Command.liftTermElabM do
  let s := s.getString
  let names := t.map (fun stx => stx.getId)
  let (nameDefs, msgs) ‚Üê elabFrontDefsExprM s names.toList
  for (n, v) in nameDefs do
    logInfo s!"Definition: {n} with value {‚Üê ppExpr v}"
  for msg in msgs.toList do
    logInfo msg.data

/--
info: Definition: div_add_1 with value fun {K} [DivisionSemiring K] {a b} h => Eq.symm (div_add_same h)
-/
#guard_msgs in
#defs "theorem div_add_1{K : Type u_1} [DivisionSemiring K] {a b : K} (h : b ‚â† 0) :
a / b + 1 = (a + b) / b := (div_add_same h).symm" div_add_1 DivisionSemiRing Field

/--
info: Definition: newDef with value fun {ùïú} [NontriviallyNormedField ùïú] {H} [TopologicalSpace H] {E} [NormedAddCommGroup E] [NormedSpace ùïú E] {I} {G}
    [TopologicalSpace G] [ChartedSpace H G] [Group G] {a} [LieGroup I ‚ä§ G] [ENat.LEInfty a] =>
  sorry
---
info: declaration uses 'sorry'
-/
#guard_msgs in
#defs "instance newDef{ùïú : Type u_1} [NontriviallyNormedField ùïú] {H : Type u_2} [TopologicalSpace H] {E : Type u_3} [NormedAddCommGroup E] [NormedSpace ùïú E] {I : ModelWithCorners ùïú E H} {G : Type u_4} [TopologicalSpace G] [ChartedSpace H G] [Group G] {a : WithTop ‚Ñï‚àû} [LieGroup I (‚Üë‚ä§) G] [h : ENat.LEInfty a] :
LieGroup I a G := by sorry" ModelWithCorners newDef LieGroup withTop

/--
info: Definition: ChainComplex with value fun V [CategoryTheory.Category.{v, u} V] [CategoryTheory.Limits.HasZeroMorphisms V] Œ± [AddRightCancelSemigroup Œ±]
    [One Œ±] =>
  HomologicalComplex V (ComplexShape.down Œ±)
---
info: Definition: newDef2 with value sorry
---
info: declaration uses 'sorry'
-/
#guard_msgs in
#defs "def newDef2 : ‚àÄ (C : Type u)
  [inst : CategoryTheory.Category.{v, u} C]
    [inst_1 : CategoryTheory.Limits.HasCoproducts C]
      [inst_2 : CategoryTheory.Preadditive C]
        (R : C)
          (X : TopCat)
            [TotallyDisconnectedSpace ‚ÜëX],
              ((AlgebraicTopology.singularChainComplexFunctor C).obj R).obj X ‚âÖ
                ChainComplex.alternatingConst.obj (‚àê fun (_ : X) => R):= by sorry" ChainComplex newDef2

elab "#defs_with_prefix" s:str t:ident : command => Command.liftTermElabM do
  let s := s.getString
  let (nameDefs, msgs) ‚Üê elabFrontDefsExprAtM s t.getId
  for (n, v) in nameDefs do
    logInfo s!"Definition: {n} with value {‚Üê ppExpr v}"
  for msg in msgs.toList do
    logInfo msg.data

/-- info: ok: ‚àÄ {G : Type u} [inst : Group G] (a : G) (n : ‚Ñï), a ^ n = 1 ‚Üí ‚àÉ m, n = m * orderOf a -/
#guard_msgs in
#eval ppExprM? <| elabFrontTheoremExprMStrict "‚àÄ {G : Type u} [inst : Group G] (a : G) (n : ‚Ñï), a ^ n = 1 ‚Üí ‚àÉ m, n = m * orderOf a"

/-- info: ok: ‚àÄ (n : ‚Ñï), n ‚â§ n + 1 -/
#guard_msgs in
#eval ppExprM? <| elabFrontTheoremExprMStrict "‚àÄ n: Nat, n ‚â§ n + 1"

/-- info: ok: ‚àÄ {G : Type u} [inst : Group G] (a : G) (n : ‚Ñï), a ^ n = 1 ‚Üí ‚àÉ m, n = m * orderOf a -/
#guard_msgs in
#eval ppExprM? <| elabFrontTheoremExprM "‚àÄ {G : Type u} [inst : Group G] (a : G) (n : ‚Ñï), a ^ n = 1 ‚Üí ‚àÉ m, n = m * orderOf a"


/--
info: ok: (C : Type u) ‚Üí
  [inst : CategoryTheory.Category.{v, u} C] ‚Üí
    [inst_1 : CategoryTheory.Limits.HasCoproducts C] ‚Üí
      [inst_2 : CategoryTheory.Preadditive C] ‚Üí
        (R : C) ‚Üí
          (X : TopCat) ‚Üí
            [TotallyDisconnectedSpace ‚ÜëX] ‚Üí
              ((AlgebraicTopology.singularChainComplexFunctor C).obj R).obj X ‚âÖ
                ChainComplex.alternatingConst.obj (‚àê fun x => R)
-/
#guard_msgs in
#eval ppExprM? <| elabFrontTheoremExprM "‚àÄ (C : Type u)
  [inst : CategoryTheory.Category.{v, u} C]
    [inst_1 : CategoryTheory.Limits.HasCoproducts C]
      [inst_2 : CategoryTheory.Preadditive C]
        (R : C)
          (X : TopCat)
            [TotallyDisconnectedSpace ‚ÜëX],
              ((AlgebraicTopology.singularChainComplexFunctor C).obj R).obj X ‚âÖ
                ChainComplex.alternatingConst.obj (‚àê fun (_ : X) => R)"

/-- info: ok: ‚Ñï ‚Üí ‚Ñï -/
#guard_msgs in
#eval ppExprM? <| elabFrontTypeExprM "Nat ‚Üí Nat"

/--
info: ok: (C : Type u) ‚Üí
  [inst : CategoryTheory.Category.{v, u} C] ‚Üí
    [inst_1 : CategoryTheory.Limits.HasCoproducts C] ‚Üí
      [inst_2 : CategoryTheory.Preadditive C] ‚Üí
        (R : C) ‚Üí
          (X : TopCat) ‚Üí
            [TotallyDisconnectedSpace ‚ÜëX] ‚Üí
              ((AlgebraicTopology.singularChainComplexFunctor C).obj R).obj X ‚âÖ
                ChainComplex.alternatingConst.obj (‚àê fun x => R)
-/
#guard_msgs in
#eval ppExprM? <| elabFrontTypeExprM "‚àÄ (C : Type u)
  [inst : CategoryTheory.Category.{v, u} C]
    [inst_1 : CategoryTheory.Limits.HasCoproducts C]
      [inst_2 : CategoryTheory.Preadditive C]
        (R : C)
          (X : TopCat)
            [TotallyDisconnectedSpace ‚ÜëX],
              ((AlgebraicTopology.singularChainComplexFunctor C).obj R).obj X ‚âÖ
                ChainComplex.alternatingConst.obj (‚àê fun (_ : X) => R)"

/-- info: [] -/
#guard_msgs in
#eval checkTermElabFrontM "(R : Type u_1) ‚Üí
  [inst : CommSemiring R] ‚Üí (M : Type u_6) ‚Üí [inst_1 : AddCommMonoid M] ‚Üí [_root_.Module R M] ‚Üí Type (max u_1 u_6)"

/-- info: [] -/
#guard_msgs in
#eval checkTypeElabFrontM "(R : Type u_1) ‚Üí
  [inst : CommSemiring R] ‚Üí (M : Type u_6) ‚Üí [inst_1 : AddCommMonoid M] ‚Üí [_root_.Module R M] ‚Üí Type (max u_1 u_6)"

/-- info: [] -/
#guard_msgs in
#eval checkTermElabFrontM "‚àÄ {G : Type u} [inst : Group G] (a : G) (n : ‚Ñï), a ^ n = 1 ‚Üí ‚àÉ m, n = m * orderOf a"

/-- info: [] -/
#guard_msgs in
#eval checkTypeElabFrontM "‚àÄ {G : Type u} [inst : Group G] (a : G) (n : ‚Ñï), a ^ n = 1 ‚Üí ‚àÉ m, n = m * orderOf a"

/-- info: #[`x] -/
#guard_msgs in
#eval newDeclarations "def x : Nat := 0"

/-- info: #[`newTheorem] -/
#guard_msgs in
#eval newDeclarations "def newTheorem (G : Type u) [Group G] : Type u := G ‚ß∏ commutator G"

/-- info: #[`M, `x, `newTheorem] -/
#guard_msgs in
#eval newDeclarations "def M {R‚ÇÅ : Type u_1} [CommSemiring R‚ÇÅ] {n : Type u_5} [Fintype n] (M : Matrix n n R‚ÇÅ) : LinearMap.BilinForm R‚ÇÅ (n ‚Üí R‚ÇÅ) :=
  Matrix.toLinearMap‚ÇÇ'Aux _ _ M
  def newTheorem (G : Type u) [Group G] : Type u := G ‚ß∏ commutator G
  def x : Nat := 0"

elab "#new_defs" s:str : command => Command.liftTermElabM do
  let s := s.getString
  let (nameDefs, msgs) ‚Üê elabFrontDefsNewExprM s
  for (n, v) in nameDefs do
    logInfo s!"New definition: {n} with value {‚Üê ppExpr v}"
  for msg in msgs.toList do
    logInfo msg.data

/--
info: New definition: IsContinuous with value fun {X} {Y} [TopologicalSpace X] [TopologicalSpace Y] Œ¶ => ‚àÄ (s : Set Y), IsOpen s ‚Üí IsOpen (Œ¶ ‚Åª¬π' s)
-/
#guard_msgs in
#new_defs "open Nat def IsContinuous {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] (Œ¶ : X ‚Üí Y) : Prop := ‚àÄ s : Set Y, IsOpen s ‚Üí IsOpen (Œ¶‚Åª¬π' s)"


/-- info: New definition: y with value 1 -/
#guard_msgs in
#new_defs "open Nat def y : Nat := 1"

/--
info: New definition: M with value fun {R‚ÇÅ} [CommSemiring R‚ÇÅ] {n} [Fintype n] M => Matrix.toLinearMap‚ÇÇ'Aux (RingHom.id R‚ÇÅ) (RingHom.id R‚ÇÅ) M
-/
#guard_msgs in
#new_defs "def M {R‚ÇÅ : Type u_1} [CommSemiring R‚ÇÅ] {n : Type u_5} [Fintype n] (M : Matrix n n R‚ÇÅ) : LinearMap.BilinForm R‚ÇÅ (n ‚Üí R‚ÇÅ) :=
  Matrix.toLinearMap‚ÇÇ'Aux _ _ M"


/--
info: New definition: mWCs with value fun ùïú [NontriviallyNormedField ùïú] E [inst_1 : NormedAddCommGroup E] [NormedSpace ùïú E] =>
  ModelWithCorners.of_target_univ ùïú (PartialEquiv.refl E) (@mWCs._proof_1 E) (@mWCs._proof_2 E)
    (@mWCs._proof_3 E inst_1) (@mWCs._proof_3 E inst_1)
---
info: New definition: MWc with value fun ùïú [inst : NontriviallyNormedField ùïú] {E} [inst_1 : NormedAddCommGroup E] [inst_2 : NormedSpace ùïú E] {H}
    [TopologicalSpace H] f hsource htarget hcont hcont_inv =>
  { toPartialEquiv := f, source_eq := hsource,
    convex_range' := @MWc._proof_1 ùïú inst E inst_1 inst_2 H f hsource htarget,
    nonempty_interior' := @MWc._proof_2 E inst_1 H f hsource htarget, continuous_toFun := hcont,
    continuous_invFun := hcont_inv }
-/
#guard_msgs in
#new_defs "def MWc (ùïú : Type u_1) [NontriviallyNormedField ùïú] {E : Type u_2} [NormedAddCommGroup E] [NormedSpace ùïú E] {H : Type u_3} [TopologicalSpace H] (f : PartialEquiv H E) (hsource : f.source = Set.univ) (htarget : f.target = Set.univ) (hcont : Continuous ‚Üëf) (hcont_inv : Continuous ‚Üëf.symm) :
ModelWithCorners ùïú E H where
  toPartialEquiv := f
  source_eq := hsource
  convex_range' := by
    have : Set.range f = f.target := by rw [‚Üê f.image_source_eq_target, hsource, Set.image_univ.symm]
    simp only [this, htarget, dite_else_true]
    intro h
    letI := h.rclike ùïú
    letI := NormedSpace.restrictScalars ‚Ñù ùïú E
    exact convex_univ
  nonempty_interior' := by
    have : Set.range f = f.target := by rw [‚Üê f.image_source_eq_target, hsource, Set.image_univ.symm]
    simp [this, htarget]

    def mWCs (ùïú : Type*) [NontriviallyNormedField ùïú] (E : Type*)
    [NormedAddCommGroup E] [NormedSpace ùïú E] : ModelWithCorners ùïú E E :=
  ModelWithCorners.of_target_univ ùïú (PartialEquiv.refl E) rfl rfl continuous_id continuous_id
    "
/--
info: New definition: MWCReqT with value fun {ùïú} {E} {H} [NontriviallyNormedField ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E] [TopologicalSpace H] I =>
  Eq.mpr
    (id
      (congrArg (fun _a => Set.range ‚ÜëI.toPartialEquiv = _a)
        (Eq.symm (PartialEquiv.image_source_eq_target I.toPartialEquiv))))
    (Eq.mpr (id (congrArg (fun _a => Set.range ‚ÜëI.toPartialEquiv = ‚ÜëI.toPartialEquiv '' _a) I.source_eq))
      (Eq.mpr (id (congrArg (fun _a => _a = ‚ÜëI.toPartialEquiv '' Set.univ) (Eq.symm Set.image_univ)))
        (Eq.refl (‚ÜëI.toPartialEquiv '' Set.univ))))
-/
#guard_msgs in
#new_defs "theorem MWCReqT{ùïú : Type u_1} {E : Type u_2} {H : Type u_3} [NontriviallyNormedField ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E] [TopologicalSpace H] (I : ModelWithCorners ùïú E H) :
Set.range ‚ÜëI.toPartialEquiv = I.target := by
  rw [‚Üê I.image_source_eq_target, I.source_eq, Set.image_univ.symm]"

/--
info: New definition: CMap with value fun {C} [CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C] {D} [CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D] {E}
    [CategoryTheory.Category.{v‚ÇÉ, u‚ÇÉ} E] F G {X Y} f =>
  rfl
---
info: New definition: CTFC with value fun {C} [CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C] {D} [CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D] F {X Y} {f g} h =>
  Eq.mpr (id (congrArg (fun _a => F.map _a = F.map g) h)) (Eq.refl (F.map g))
-/
#guard_msgs in
#new_defs "open CategoryTheory theorem CTFC {C : Type u‚ÇÅ} [CategoryTheory.Category.{v‚ÇÅ ,u‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ, u‚ÇÇ} D] (F : C ‚•§ D) {X Y : C} {f g : X ‚ü∂ Y} (h : f = g) :
F.map f = F.map g := by
 rw[h]
theorem CMap {C : Type u‚ÇÅ} [Category.{v‚ÇÅ, u‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ, u‚ÇÇ} D] {E : Type u‚ÇÉ} [Category.{v‚ÇÉ, u‚ÇÉ} E](F : C ‚•§ D) (G : D ‚•§ E) {X Y : C} (f : X ‚ü∂ Y) :
    (F ‚ãô G).map f = G.map (F.map f) := rfl"

end LeanAideTest
